import streamlit as st
from PIL import Image
import base64
import subprocess
import os
import math
import gmsh
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing

def run_gmsh(file_path):
    try:
        env = os.environ.copy()
        env["LIBGL_ALWAYS_SOFTWARE"] = "1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        subprocess.run(["gmsh", file_path], check=True, env=env)
        st.success("Gmsh —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    except FileNotFoundError:
        st.error("Gmsh –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
    except subprocess.CalledProcessError:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Gmsh.")

def show_code(code, language="python"):
    st.code(code, language)


menu = st.sidebar.radio('***',
    ("–°—Ö–µ–º–∞ —Ç–µ—á–µ–Ω–∏—è", 
    ""
    "–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ –æ–±—Ç–µ–∫–∞–Ω–∏–µ",       
    "–ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ –æ–±—Ç–µ–∫–∞–Ω–∏–µ",
    "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è",
    )
)

if menu == "–°—Ö–µ–º–∞ —Ç–µ—á–µ–Ω–∏—è":
    st.markdown(r"""
    **–°—Ö–µ–º–∞ —Ç–µ—á–µ–Ω–∏—è**
    """)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    st.image("6.png", use_container_width=True)
    r"""
    -----------------------------------
    ###### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã

     - $N = 9$ -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
     - $H = 3$ -- –≤—ã—Å–æ—Ç–∞ –∫–∞–Ω–∞–ª–∞
     - $L = 3$ -- —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞
    """
    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —è—á–µ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"):
        code_1 = """
        // –†–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–∏
        L = 3.0; // –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
        H = 3.0; // –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏

        // –†–∞–∑–º–µ—Ä—ã —ç–ª–ª–∏–ø—Å–æ–≤
        r = 0.125;
        R = 0.175;

        // –°–µ—Ç–∫–∞ –∏ —à–∞–≥
        N = 30;
        d = H / N;
        dd = 0.05 * d;

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–ª–∏–ø—Å–æ–≤
        nx = 3;
        ny = 3;

        // –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏
        dx = L / nx;
        dy = H / ny;
        """
        show_code(code_1, "python")
    
    with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤"):
        code_2 = """
        // –£–≥–ª—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        Point(1) = {0, 0, 0, d};
        Point(2) = {L, 0, 0, d};
        Point(3) = {L, H, 0, d};
        Point(4) = {0, H, 0, d};

        // –ì—Ä–∞–Ω–∏—Ü—ã
        Line(1) = {1, 2}; // –Ω–∏–∂–Ω—è—è
        Line(2) = {2, 3}; // –ø—Ä–∞–≤–∞—è
        Line(3) = {3, 4}; // –≤–µ—Ä—Ö–Ω—è—è
        Line(4) = {4, 1}; // –ª–µ–≤–∞—è

        Line Loop(1) = {1, 2, 3, 4};

        // –û–±—â–∏–µ —Å–ø–∏—Å–∫–∏
        ellipses_loops[] = {};
        ellipses_all_curves[] = {};

        line_group_id = 10;

        For j In {1:ny}
            ellipse_lines_row[] = {};
            For i In {1:nx}
                n = (j - 1) * nx + i;

                xc = (i - 0.5) * dx;
                yc = (j - 0.5) * dy;

                p = 10 * n;
                c = 1000 + 4 * n;

                Point(p + 0) = {xc, yc, 0, dd};
                Point(p + 1) = {xc + R, yc, 0, dd};
                Point(p + 2) = {xc, yc + r, 0, dd};
                Point(p + 3) = {xc - R, yc, 0, dd};
                Point(p + 4) = {xc, yc - r, 0, dd};

                Ellipse(c + 0) = {p + 1, p + 0, p + 2};
                Ellipse(c + 1) = {p + 2, p + 0, p + 3};
                Ellipse(c + 2) = {p + 3, p + 0, p + 4};
                Ellipse(c + 3) = {p + 4, p + 0, p + 1};

                Rotate {{0, 0, 1}, {xc, yc, 0}, Pi/4} {
                    Curve{c + 0 : c + 3};
                }

                Line Loop(n + 1) = {c + 0, c + 1, c + 2, c + 3};
                ellipses_loops[] += {n + 1};
                ellipses_all_curves[] += {c + 0, c + 1, c + 2, c + 3};
                ellipse_lines_row[] += {c + 0, c + 1, c + 2, c + 3};
            EndFor

            // –§–∏–∑–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ç—Ä–æ–∫ —ç–ª–ª–∏–ø—Å–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
            Physical Line(line_group_id) = {ellipse_lines_row[]};
            line_group_id += 1;
        EndFor
        """
        show_code(code_2, "python")

    with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏"):
        code_3 = """
        // –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å –æ—Ç–≤–µ—Ä—Å—Ç–∏—è–º–∏
        Plane Surface(1) = {1, ellipses_loops[]};
        """
        show_code(code_3, "python")

    with st.expander("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ì–£"):
        code_4 = """
        // –ì—Ä–∞–Ω–∏—Ü—ã
        Physical Line(101) = {1}; // bottom
        Physical Line(102) = {2}; // right
        Physical Line(103) = {3}; // top
        Physical Line(104) = {4}; // left

        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        Physical Surface(201) = {1};
        """
        show_code(code_4, "python")

    with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∫–∏"):
        code_5 = """
        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
        Mesh 2;
        """
        show_code(code_5, "python")

    result = ''
    for i in range(1, 6):
        result += globals()[f'code_{i}']


    def save_example_file():
        example_file_path = './group_ellips.geo'
        with open(example_file_path, 'w') as f:
                f.write(result)
        return example_file_path

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
    if st.button("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ üîß"):
            example_file_path = save_example_file()
            run_gmsh(example_file_path)

elif menu == "–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ –æ–±—Ç–µ–∫–∞–Ω–∏–µ":
    r"""
    ##### –°–µ—Ç–∫–∞
    """
    st.image("group_ellips_—Å.png", caption="",use_container_width=True)
    
    r"""
        ------------------------------------------------
        * –ß–∏—Å–ª–æ —è—á–µ–µ–∫ —Å–µ—Ç–∫–∏: 335690

        * –ß–∏—Å–ª–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏: 168677

        ------------------------------------------------
        ##### –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (FEniCS)
    """
    st.image("ellips_array_result_—Å.png", caption="",use_container_width=True)

    r"""
        ------------------------------------------------
        * –°—É–º–º–∞—Ä–Ω–∞—è —Ü–∏—Ä–∫—É–ª–ª—è—Ü–∏—è: $5.146854*10^{-8}$
        """

elif menu == "–ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ –æ–±—Ç–µ–∫–∞–Ω–∏–µ":

    subtopic = st.selectbox(
        "–ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å —ç–ª–ª–∏–ø—Å–∞",  
        ["R = 0.175", "R = 0.225", "R = 0.275"]  
    )

    if subtopic == "R = 0.175":

        
        r"""
            ------------------------------------------------
            * –ß–∏—Å–ª–æ —è—á–µ–µ–∫ —Å–µ—Ç–∫–∏: 337634

            * –ß–∏—Å–ª–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏: 169793

            ------------------------------------------------
            ##### –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (FEniCS)
        """
        st.image("ellips_array_result_1.png", caption="",use_container_width=True)

        r"""
            ------------------------------------------------
            * –°—É–º–º–∞—Ä–Ω–∞—è —Ü–∏—Ä–∫—É–ª–ª—è—Ü–∏—è: $2.536574*10^{-7}$
            """


    elif subtopic == "R = 0.225":

        
        r"""
            ------------------------------------------------

            * –ß–∏—Å–ª–æ —è—á–µ–µ–∫ —Å–µ—Ç–∫–∏: 355588

            * –ß–∏—Å–ª–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏: 179094

            ------------------------------------------------
            ##### –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (FEniCS)
        """
        st.image("ellips_array_result_2.png", caption="",use_container_width=True)

        r"""
            ------------------------------------------------
            * –°—É–º–º–∞—Ä–Ω–∞—è —Ü–∏—Ä–∫—É–ª–ª—è—Ü–∏—è: $2.536574*10^{-7}$
            """

    elif subtopic == "R = 0.275":
        
        r"""
            ------------------------------------------------

            * –ß–∏—Å–ª–æ —è—á–µ–µ–∫ —Å–µ—Ç–∫–∏: 356954

            * –ß–∏—Å–ª–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏: 179615

            ------------------------------------------------
            ##### –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (FEniCS)
        """
        st.image("ellips_array_result_3.png", caption="",use_container_width=True)

        r"""
            ------------------------------------------------
            * –°—É–º–º–∞—Ä–Ω–∞—è —Ü–∏—Ä–∫—É–ª–ª—è—Ü–∏—è: $7.114579*10^{-6}$
            """

elif menu == "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è":

    r"""
    ##### –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    """

    with st.expander("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"):
        code = """
            # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            V = FunctionSpace(mesh, "CG", 1)
        """

        st.code(code, language="python")

    with st.expander("–£—Å–ª–æ–≤–∏–µ –Ω–∞ –≤—Ö–æ–¥–µ –≤ –∫–∞–Ω–∞–ª"):
        code = """
            # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            u_infinity = Expression("x[1]", degree=2)
            H = 3
            psi_top = u_infinity * H
            """

        st.code(code, language="python")

    with st.expander("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"):
        code = """
        #–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        bcs = [
            DirichletBC(V, Constant(0.0), boundaries, 101),     # top
            DirichletBC(V, psi_top, boundaries, 102),           # bottom
            DirichletBC(V, psi_top, boundaries, 103),           # inlet
            DirichletBC(V, psi_top, boundaries, 104),           # outlet
            DirichletBC(V, Constant(1.5), boundaries, 10),      # cylinder row 1
            DirichletBC(V, Constant(4.5), boundaries, 11),      # cylinder row 2
            DirichletBC(V, Constant(7.5), boundaries, 12)       # cylinder row 3
        ]
        """

        st.code(code, language="python")

    with st.expander("–í–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞"):
        code = """
            u = TrialFunction(V)
            v = TestFunction(V)
            f = Constant(0.0)
            a = dot(grad(u), grad(v)) * dx
            L = f * v * dx
        """

        st.code(code, language="python")

    with st.expander("–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"):
        code = """
            u = Function(V)
            solve(a == L, u, bcs)
        """

        st.code(code, language="python")

    with st.expander("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"):
        code = """
            V_vector = VectorFunctionSpace(mesh, "CG", 1)
            velocity = project(grad(u), V_vector)
            velocity_magnitude = project(sqrt(dot(velocity, velocity)), V)
        """

        st.code(code, language="python")

    with st.expander("–ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫"):
        code = """
            # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ (–≥–¥–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—á—Ç–∏ –Ω—É–ª–µ–≤–∞—è)
            threshold = 1e-1
            critical_points = (velocity_values < threshold)
            critical_x = x[critical_points]
            critical_y = y[critical_points]

            fig, ax = plt.subplots(figsize=(10, 10))
            cbar = plt.colorbar(
                plt.tricontourf(x, y, triangles, velocity_values, levels=100, cmap='viridis')
            )

        """

        st.code(code, language="python")

    with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç–ª–ª–∏–ø—Å–∞"):
        code = """
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–ª–∏–ø—Å–æ–≤
            additional_centers = [
                (0.5, 0.5), (1.5, 0.5), (0.5, 2.5),
                (0.5, 1.5), (1.5, 1.5), (1.5, 2.5),
                (2.5, 0.5), (2.5, 1.5), (2.5, 2.5)
            ]
            a, b = 0.275, 0.125
            alpha = np.pi / 4
            theta = np.linspace(0, 2 * np.pi, 200)
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–ª–∏–ø—Å–æ–≤
            for cx, cy in additional_centers:
                x_ellipse = a * np.cos(theta)
                y_ellipse = b * np.sin(theta)
                x_rot = cx + x_ellipse * np.cos(alpha) - y_ellipse * np.sin(alpha)
                y_rot = cy + x_ellipse * np.sin(alpha) + y_ellipse * np.cos(alpha)
                ax.fill(x_rot, y_rot, 'w', zorder=3)
                ax.plot(x_rot, y_rot, 'r', linewidth=1, zorder=4)
        """

        st.code(code, language="python")


        

