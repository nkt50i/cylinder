import streamlit as st
from PIL import Image
import base64
import subprocess
import os
import math
import gmsh
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing

def run_gmsh(file_path):
    try:
        env = os.environ.copy()
        env["LIBGL_ALWAYS_SOFTWARE"] = "1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        subprocess.run(["gmsh", file_path], check=True, env=env)
        st.success("Gmsh —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    except FileNotFoundError:
        st.error("Gmsh –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
    except subprocess.CalledProcessError:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Gmsh.")

def show_code(code, language="python"):
    st.code(code, language)


##### –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å
st.markdown(r"""
**–°—Ö–µ–º–∞ —Ç–µ—á–µ–Ω–∏—è**
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.image("6.png", 
        use_container_width=True)  

st.markdown(r"""
**–Ø—á–µ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏**
""")
st.image("7.png", 
        use_container_width=True) 

st.markdown(r"""
+ $D -$ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —Å–µ—á–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã—Ö –Ω–∞ 45 –≥—Ä–∞–¥—É—Å–æ–≤  
+ $\gamma -$ –≥—Ä–∞–Ω–∏—Ü–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞  
+ $r, \ R -$ –º–∞–ª–∞—è –∏ –±–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å–∏ —ç–ª–ª–∏–ø—Å–∞    
+ $(l, h)-$ —Ü–µ–Ω—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞  
+ $\Omega -$ —Ä–∞—Å—á–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å  
+ $L, H -$ –¥–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —è—á–µ–π–∫–∏  
+ $\Gamma -$ –≥—Ä–∞–Ω–∏—Ü–∞ —è—á–µ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
""")
r"""
##### –§–∞–π–ª –≥–µ–æ–º–µ—Ç—Ä–∏–∏
"""
with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —è—á–µ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"):
    code_1 = """
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    L = 1;      // –®–∏—Ä–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    H = 1;      // –í—ã—Å–æ—Ç–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    """
    show_code(code_1, "python")
with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞"):
    code_2 = """
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä—É–≥–æ–≤–æ–≥–æ –≤—ã—Ä–µ–∑–∞
    r = 0.125;  // –ú–∞–ª—ã–π —Ä–∞–¥–∏—É—Å —ç–ª–ª–∏–ø—Å–∞
    R = 0.125; // –ë–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å —ç–ª–ª–∏–ø—Å–∞
    l = L/2;   // X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ —ç–ª–ª–∏–ø—Å–∞
    h = H/2;   // Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ —ç–ª–ª–∏–ø—Å–∞
    """
    show_code(code_2, "python")
with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"):
    code_3 = """
    // –†–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
    N = 30;     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
    d = H/N;    // –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –ø–æ —à–∏—Ä–∏–Ω–µ –∫–∞–Ω–∞–ª–∞
    dd = 0.025*d; // –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
    """
    show_code(code_3, "python")
with st.expander("–¢–æ—á–∫–∏ —è—á–µ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"):
    code_4 = """
    // –¢–æ—á–∫–∏ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    Point(1) = {0, 0, 0, d};
    Point(2) = {L, 0, 0, d};
    Point(3) = {L, H, 0, d};
    Point(4) = {0, H, 0, d};
    """
    show_code(code_4, "python")
with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —è—á–µ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"):
    code_5 = """
    // –õ–∏–Ω–∏–∏ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    Line(1) = {1, 2};  // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Line(2) = {2, 3};  // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    Line(3) = {3, 4};  // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Line(4) = {4, 1};  // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    """
    show_code(code_5, "python")
with st.expander("–¢–æ—á–∫–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞"):
    code_6 = """
    // –¢–æ—á–∫–∏ –¥–ª—è —ç–ª–ª–∏–ø—Å–∞
    Point(5) = {l, h, 0, dd};
    Point(6) = {l + r, h, 0, dd};
    Point(7) = {l, h + R, 0, dd};
    Point(8) = {l - R, h, 0, dd};
    Point(9) = {l, h - r, 0, dd};
    """
    show_code(code_6, "python")
with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥—É–≥ —Ü–∏–ª–∏–Ω–¥—Ä–∞"):
    code_7 = """
    // –î—É–≥–∏ –¥–ª—è —ç–ª–ª–∏–ø—Å–∞
    Ellipse(5) = {6, 5, 7};
    Ellipse(6) = {7, 5, 8};
    Ellipse(7) = {8, 5, 9};
    Ellipse(8) = {9, 5, 6};
    """
    show_code(code_7, "python")
with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–º–∫–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤ –∏ –ø–æ–≤–æ—Ä–æ—Ç —Ü–∏–ª–∏–Ω–¥—Ä–∞"):
    code_8 = """
    // –ö–æ–Ω—Ç—É—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    Line Loop(1) = {1, 2, 3, 4};

    // –ö–æ–Ω—Ç—É—Ä –∫—Ä—É–≥–∞
    Line Loop(2) = {5, 6, 7, 8};

    Rotate {{0, 0, 1}, {l, h, 0}, Pi / 4} {
            Curve{5, 6, 7, 8}; // –í—Ä–∞—â–∞–µ–º –≤—Å–µ –¥—É–≥–∏ –∫—Ä—É–≥–∞
    }

    // –ü–ª–æ—Å–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å –≤—ã—Ä–µ–∑–æ–º
    Plane Surface(1) = {1, 2};
    """
    show_code(code_8, "python")
with st.expander("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ì–£"):
    code_9 = """
    // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
    Physical Line("1") = {1};           // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Physical Line("2") = {3};           // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    Physical Line("3") = {4};           // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    Physical Line("4") = {2};           // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    Physical Line("5") = {5, 6, 7, 8};  // –ì—Ä–∞–Ω–∏—Ü–∞ –∫—Ä—É–≥–∞

    // –§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
    Physical Surface("1") = {1};
    """
    show_code(code_9, "python")
with st.expander("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∫–∏"):
    code_10 = """
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
    Mesh.CharacteristicLengthMin = dd;
    Mesh.CharacteristicLengthMax = d;
    Mesh 2;
    """
    show_code(code_10, "python")

result = ''
for i in range(1, 11):
    result += globals()[f'code_{i}']


def save_example_file():
    example_file_path = './sym_ellips.geo'
    with open(example_file_path, 'w') as f:
            f.write(result)
    return example_file_path

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
if st.button("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ üîß"):
        example_file_path = save_example_file()
        run_gmsh(example_file_path)